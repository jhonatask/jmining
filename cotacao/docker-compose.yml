version: '3.8' # ou a versão desejada do Docker Compose

services:
  zookeeper:
    image: quay.io/strimzi/kafka:0.41.0-kafka-3.7.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - app-network
  kafka:
    image: quay.io/strimzi/kafka:0.41.0-kafka-3.7.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT} --override num.partitions=$${KAFKA_NUM_PARTITIONS}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - app-network

  # Serviço para criar o tópico Kafka após Kafka estar ativo
  init-kafka:
    image: quay.io/strimzi/kafka:0.41.0-kafka-3.7.0
    depends_on:
      - kafka
    command: |
      bash -c "
        sleep 20;
        kafka-topics --create --zookeeper zookeeper:2181 --topic quotation --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 ;
      "

  # Serviço PostgreSQL
  postgres:
    image: postgres:alpine3.20
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres      # Substitua pelo seu usuário
      POSTGRES_PASSWORD: Pamonha123*   # Substitua pela sua senha
      POSTGRES_DB: quotation    # Substitua pelo nome do seu banco de dados
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
